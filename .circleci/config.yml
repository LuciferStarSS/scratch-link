version: 2.1

alias_anchors: # anchors must be defined in YAML before being used by an alias
  - &should_sign
    or:
      - equal: [ develop, << pipeline.git.branch >> ]
      - equal: [ main, << pipeline.git.branch >> ]
      - equal: [ master, << pipeline.git.branch >> ]
      - equal: [ "ng-csharp-xamarin", << pipeline.git.branch >> ]
workflows:
  version: 2
  build:
    jobs:
      - build-mac:
          context: scratch-desktop-and-link
jobs:
  build-mac:
    macos:
      xcode: 13.4
    steps:
      - checkout
      - run:
          name: Build Safari helper
          command: |
            xcodebuild -project "Scratch Link Safari Helper/Scratch Link Safari Helper.xcodeproj" -scheme "Scratch Link Safari Helper" clean build
      - restore_cache:
          keys:
            - visual-studio-mac-v3
      - run:
          name: Install/Extract Visual Studio for Mac
          command: |
            # CACHE_ARCHIVE must match the path in save_cache
            CACHE_ARCHIVE="/tmp/visual-studio-mac-v3.tar.gz"
            bash ./.circleci/install-or-extract-vs-mac.sh "$CACHE_ARCHIVE"
      - save_cache:
          key: visual-studio-mac-v3
          paths: # Caching an archive instead of loose files works around CircleCI's issues with extracting links and permissions on macOS
            - /tmp/visual-studio-mac-v3.tar.gz
      - unless:
          condition:
            *should_sign
          steps:
            - do_mac_build:
                configuration: Debug
                artifact_tag: Debug
      - when:
          condition:
            *should_sign
          steps:
            - add_ssh_keys
            - run:
                name: Import CI context
                command: fastlane circleci
            - do_mac_build:
                configuration: Release_DevID
                artifact_tag: notarizeMe # see below
            - do_mac_build:
                configuration: Release_MAS
                artifact_tag: MAS
            - run:
                name: Notarize Developer ID build
                command: |
                  for PKGPATH in Artifacts/"Scratch Link-notarizeMe"*.pkg; do
                    PKGFILE="${PKGPATH##*/}"
                    scratch-link-mac/notarize.sh edu.mit.scratch.scratch-link "${PKGPATH}" "${PKGPATH}" /tmp || rm -f "${PKGPATH}"
                    mv -v "${PKGPATH}" "Artifacts/${PKGFILE/Scratch Link-notarizeMe/Scratch Link}"
                  done
      - store_artifacts:
          path: Artifacts/
commands:
  do_mac_build:
    parameters:
      configuration:
        default: "Release"
        type: string
      artifact_tag:
        default: ""
        type: string
    steps:
      - run:
          name: "Build for Mac: <<parameters.configuration>>"
          command: |
            msbuild -m -t:Restore -p:Configuration=<<parameters.configuration>> scratch-link.sln
            "/Applications/Visual Studio.app/Contents/MacOS/vstool" build -t:Build -c:<<parameters.configuration>> "${PWD}/scratch-link.sln"
            # "for" is just a convenient way to resolve the glob to a variable so we can DRY the filename for "if" and "cp"
            for PKGPATH in scratch-link-mac/bin/<<parameters.configuration>>/"Scratch Link"*.pkg; do
              if [ -r "$PKGPATH" ]; then
                PKGFILE="${PKGPATH##*/}"
                if [ -n "<<parameters.artifact_tag>>" ]; then
                  PKGFILE="${PKGFILE/Scratch Link/Scratch Link-<<parameters.artifact_tag>>}"
                fi
                mkdir -p Artifacts
                cp -v "$PKGPATH" "Artifacts/${PKGFILE}"
              fi
            done
